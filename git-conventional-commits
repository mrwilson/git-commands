#!/usr/bin/env python3

import subprocess
import argparse
import re
import json

COMMIT_REGEX = '"(?P<commit>(?P<hash>[0-9a-fA-F]+) (?P<type>\w+)(\((?P<scope>.*)\))?:\s?(?P<message>.*))"'


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Log and filter conventional commit messages"
    )
    parser.add_argument("--type", type=str, help="Type of commit")
    parser.add_argument("--scope", type=str, help="Scope of commit")
    parser.add_argument("--json", action="store_true", help="Format output as JSON")
    return parser.parse_args()


def commits():
    output = subprocess.check_output(
        ["git", "log", '--pretty=format:"%h %s"']
    ).splitlines()

    for line in output:
        groups = re.match(COMMIT_REGEX, line.decode("utf-8"))
        if groups is not None:
            yield groups.groupdict()


args = parse_arguments()

match_scope = lambda x: args.scope is None or x["scope"] == args.scope
match_type = lambda x: args.type is None or x["type"] == args.type

for commit in list(filter(match_scope, filter(match_type, commits()))):

    if args.json:
        print(json.dumps(commit))
    else:
        print(commit["commit"])
