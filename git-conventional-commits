#!/usr/bin/env python3

import subprocess
import argparse
import re
import json


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Log and filter conventional commit messages"
    )
    parser.add_argument("--type", type=str, help="Type of commit")
    parser.add_argument("--scope", type=str, help="Scope of commit")
    parser.add_argument("--json", action="store_true", help="Format output as JSON")
    return parser.parse_args()


def commits():
    p = subprocess.check_output(["git", "log", '--pretty=format:"%h %s"']).splitlines()
    for line in [l.decode("utf-8") for l in p]:
        groups = re.match(
            '"(?P<commit>(?P<hash>[0-9a-fA-F]+) (?P<type>\w+)(\((?P<scope>.*)\))?:\s?(?P<message>.*))"',
            line,
        )
        if groups is not None:
            yield groups.groupdict()


args = parse_arguments()

out = filter(
    lambda x: args.scope is None or x["scope"] == args.scope,
    filter(lambda x: args.type is None or x["type"] == args.type, commits()),
)

for i in list(out):

    if args.json:
        print(json.dumps(i))
    else:
        print(i["commit"])
